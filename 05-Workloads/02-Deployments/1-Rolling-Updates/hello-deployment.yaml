apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-dep
  namespace: default
  annotations:
    deployment.kubernetes.io/revision: "1"
    deployment.kubernetes.io/revision-history: '[{"revision":1,"date":"2023-11-03T12:34:56Z"}]'
    # Custom annotations for additional information:
    deployment.myorg.io/notes: "Initial deployment with basic features"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: hello-dep
  template:
    metadata:
      labels:
        app: hello-dep
        # Change version # label.
        version: "1.0"
        # Optional - Add Patch Notes
        # pathNotes: ""
    spec:
      containers:
        # FUNDAMENTAL IDEA IS THAT IMAGE VERSIONS WILL KEEP GETTING UPDATED, i.e you are updating your code and that new image that will be used will then be deployed. Previous Versions will be recorded and a history of it will be there. For each different update, can add a label of a version to differentiate what deployment version it is.
        # You then just apply this same deployment again, kubectl apply -f hello-deployment.yaml.
        # It will then roll out the update and you will then have an additional version of the deployment
        # You can check with "kubectl describe deploy hello-dep" as well as check a new ReplicaSet being created "kubectl get rs". To move between different versions use "k rollout undo deployment hello-dep --to-revision 2". Can find revision number from "kubectl rollout history deployment hello-dep"
        #  - image: guybarrette/hello-app:1.0
        # - image: guybarrette/hello-app:2.0
        - image: nginx:alpine
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 256Mi
          imagePullPolicy: Always
          #name: hello-dep
          name: nginx-alpine
          ports:
            - containerPort: 8080
